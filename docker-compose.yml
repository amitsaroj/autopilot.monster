version: '3.8'

services:
  # Database Services
  mongodb:
    image: mongo:7.0
    container_name: autopilot-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: autopilot
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - autopilot-network

  redis:
    image: redis:7.2-alpine
    container_name: autopilot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password123
    volumes:
      - redis_data:/data
    networks:
      - autopilot-network

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: autopilot-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - autopilot-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: autopilot-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - autopilot-network

  # Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: autopilot-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - autopilot-network

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: autopilot-api-gateway
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
      PORT: 4000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_gateway?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - autopilot-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: autopilot-auth-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_auth?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      JWT_REFRESH_EXPIRES_IN: 7d
      EMAIL_SMTP_HOST: smtp.gmail.com
      EMAIL_SMTP_PORT: 587
      EMAIL_SMTP_SECURE: false
      EMAIL_SMTP_USER: your-email@gmail.com
      EMAIL_SMTP_PASSWORD: your-app-password
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - autopilot-network

  # Catalog Service
  catalog-service:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    container_name: autopilot-catalog-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      PORT: 3003
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_catalog?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
    depends_on:
      - mongodb
      - redis
      - kafka
      - elasticsearch
    networks:
      - autopilot-network

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: autopilot-payment-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: production
      PORT: 3004
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_payment?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
      STRIPE_SECRET_KEY: your-stripe-secret-key
      STRIPE_WEBHOOK_SECRET: your-stripe-webhook-secret
      RAZORPAY_KEY_ID: your-razorpay-key-id
      RAZORPAY_KEY_SECRET: your-razorpay-key-secret
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - autopilot-network

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: autopilot-user-service
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: production
      PORT: 3005
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_user?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - autopilot-network

  # Vendor Service
  vendor-service:
    build:
      context: ./services/vendor-service
      dockerfile: Dockerfile
    container_name: autopilot-vendor-service
    restart: unless-stopped
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: production
      PORT: 3006
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_vendor?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - autopilot-network

  # Admin Service
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    container_name: autopilot-admin-service
    restart: unless-stopped
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: production
      PORT: 3007
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_admin?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - autopilot-network

  # Content Service
  content-service:
    build:
      context: ./services/content-service
      dockerfile: Dockerfile
    container_name: autopilot-content-service
    restart: unless-stopped
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: production
      PORT: 3008
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/autopilot_content?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - autopilot-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: autopilot-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:4000
    depends_on:
      - api-gateway
    networks:
      - autopilot-network

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: autopilot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api-gateway
    networks:
      - autopilot-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: autopilot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - autopilot-network

  grafana:
    image: grafana/grafana:latest
    container_name: autopilot-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - autopilot-network

volumes:
  mongodb_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  autopilot-network:
    driver: bridge